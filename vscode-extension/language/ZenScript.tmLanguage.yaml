$schema: https://json.schemastore.org/tmlanguage.json

name: ZenScript
scopeName: source.zs
fileTypes:
  - zs
  - dzs

patterns:
  - include: '#preprocessor'
  - include: '#comments'
  - include: '#declarations'
  - include: '#statements'

repository:

  preprocessor:
    name: meta.preprocessor.zs
    begin: '^(#)(\S+)'
    beginCaptures:
      '1':
        name: punctuation.definition.preprocessor.zs
      '2':
        name: support.other.preprocessor.zs
    end: '\n'
    patterns:
      - include: '#numeric'
      - match: '[-+]'
        name: keyword.operator.arithmetic.zs
      - match: '\S+'
        name: string.unquoted.zs

  declarations:
    patterns:
      - include: '#import-declaration'
      - include: '#class-declaration'
      - include: '#constructor-declaration'
      - include: '#function-declaration'
      - include: '#operator-declaration'
      - include: '#variable-declaration'

  import-declaration:
    name: meta.import.zs
    begin: '(?=\b(import)\b)'
    beginCaptures:
      '1':
        name: keyword.control.import.zs
    end: '(?<=;)'
    patterns:
      - name: keyword.control.as.zs
        match: '\b(as)\b'
      - name: support.class.zs
        match: '(?=.)[^."'';\s]+(?<=.)'
      - include: '#comments'

  class-declaration:
    name: meta.class.zs
    begin: '(?=\b(zenClass)\b)'
    beginCaptures:
      '1':
        name: storage.type.class.zs
    end: '(?=[{])|(?<=[}])'
    patterns:
      - match: '\bzenClass\b\s+([a-zA-Z_$][a-zA-Z0-9_$.]*)'
        captures:
          '1':
            name: entity.name.type.class.zs
      - include: '#comments'

  constructor-declaration:
    name: meta.constructor.zs
    begin: '(?=\b(zenConstructor)\b)'
    beginCaptures:
      '1':
        name: storage.type.constructor.zs
    end: '(?=\()'
    patterns:
      - include: '#comments'

  variable-declaration:
    patterns:
      - name: meta.variable.readwrite.zs
        begin: '(?=\b(var)\b)'
        beginCaptures:
          '1':
            name: storage.type.zs
        end: '(?=[=;])'
        patterns:
          - include: '#comments'
          - match: '\bvar\b\s+([a-zA-Z_$][a-zA-Z0-9_$]*)'
            captures:
              '1':
                name: variable.other.readwrite.zs
          - include: '#type-annotation'

      - name: meta.variable.readonly.zs
        begin: '(?=\b(val|static|global)\b)'
        beginCaptures:
          '1':
            name: storage.type.zs
        end: '(?=[=;])'
        patterns:
          - include: '#comments'
          - match: '\b(?:val|static|global)\b\s+([a-zA-Z_$][a-zA-Z0-9_$]*)'
            captures:
              '1':
                name: variable.other.constant.zs
          - include: '#type-annotation'

  function-declaration:
    name: meta.function.zs
    begin: '(?:\b(static|global)\b\s+)?\b(?=(function))\b'
    beginCaptures:
      '1':
        name: storage.type.zs
      '2':
        name: storage.type.function.zs
    end: '(?=[({])'
    patterns:
      - match: '\bfunction\b\s+([a-zA-Z_$][a-zA-Z0-9_$]*)'
        captures:
          '1':
            name: meta.definition.function.zs entity.name.function.zs
      - include: '#comments'

  operator-declaration:
    name: meta.operator.zs
    begin: '(?=\b(operator)\b)'
    beginCaptures:
      '1':
        name: storage.type.operator.zs
    end: '(?=[({])'
    patterns:
      - match: '\boperator\b\s+([^(\s]+)'
        captures:
          '1':
            name: meta.definition.operator.zs entity.name.function.zs
      - include: '#comments'

  statements:
    name: meta.statements
    patterns:
      - match: '\bif\b'
        name: keyword.control.if.zs
      - match: '\belse\b'
        name: keyword.control.else.zs
      - match: '\bwhile\b'
        name: keyword.control.while.zs
      - match: '\bfor\b'
        name: keyword.control.for.zs
      - match: '\bin\b'
        name: keyword.control.in.zs
      - match: '\breturn\b'
        name: keyword.control.return.zs
      - match: '\bbreak\b'
        name: keyword.control.break.zs
      - match: '\bcontinue\b'
        name: keyword.control.continue.zs
      - match: ','
        name: punctuation.separator.comma.zs
      - match: ';'
        name: punctuation.terminator.zs
      - include: '#block'
      - include: '#expressions'

  block:
    name: meta.block.zs
    begin: '\{'
    beginCaptures:
      '0':
        name: punctuation.definition.block.zs
    end: '\}'
    endCaptures:
      '0':
        name: punctuation.definition.block.zs
    patterns:
      - include: '#comments'
      - include: '#declarations'
      - include: '#statements'
      - match: ':'
        name: punctuation.colon.zs

  expressions:
    patterns:
      - include: '#comments'
      - match: '\bfunction\b'
        name: storage.type.function.zs
      - include: '#function-call'
      - include: '#parens'
      - include: '#string'
      - include: '#numeric'
      - include: '#bracket-handler'
      - match: '\btrue\b'
        name: constant.language.true.zs
      - match: '\bfalse\b'
        name: constant.language.false.zs
      - match: '\bnull\b'
        name: constant.language.null.zs
      - match: '\bthis\b'
        name: variable.language.this.zs
      - match: '\b(in|has)\b'
        name: keyword.control.contains.zs
      - match: '\binstanceof\b'
        name: keyword.operator.instanceof.zs
      - match: '(==|!=|<=|>=|<|>)'
        name: punctuation.operator.comparison.zs
      - match: '[-+*/%&|^~]?='
        name: punctuation.operator.assignment.zs
      - match: '[-+*/%]'
        name: punctuation.operator.arithmetic.zs
      - match: '!|&&|\|\|'
        name: punctuation.operator.logical.zs
      - match: '[&^|]'
        name: punctuation.operator.bitwise.zs
      - match: ':'
        name: punctuation.colon.zs
      - match: '\?'
        name: punctuation.operator.question.zs
      - match: '\.\.'
        name: punctuation.operator.int-range.zs
      - match: '\bto\b'
        name: punctuation.control.to.zs
      - match: '~'
        name: punctuation.operator.concat.zs
      - match: ","
        name: punctuation.separator.comma.zs
      - include: '#array-literal'
      - include: '#type-annotation'
      - include: '#block'
      - include: '#identifier'

  parens:
    name: meta.parens.zs
    begin: '\('
    beginCaptures:
      "0":
        name: meta.brace.round.zs
    end: '\)'
    endCaptures:
      "0":
        name: meta.brace.round.zs
    patterns:
      - include: "#expressions"

  array-literal:
    name: meta.array-literal.zs
    begin: '\['
    beginCaptures:
      '0':
        name: punctuation.definition.array.begin.zs
    end: '\]'
    endCaptures:
      '0':
        name: punctuation.definition.array.end.zs
    patterns:
      - include: '#expressions'

  function-call:
    name: meta.function-call.zs
    begin: '([a-zA-Z_$][a-zA-Z0-9_$]*)\s*(?=[(])'
    beginCaptures:
      '1':
        name: entity.name.function.zs
    end: '(?=[({])|(?<=[)}])'
    patterns:
      - include: '#expressions'

  bracket-handler:
    name: meta.bracket-handler.zs
    match: '(<)([^>]*)(>)'
    captures:
      '1':
        name: constant.language.brackets.begin.zs
      '2':
        patterns:
          - match: '(?<=<)\s*([a-zA-Z][a-zA-Z0-9]*)'
            name: variable.other.constant.zs
          - include: '#identifier'
          - include: '#numeric'
      '3':
        name: constant.language.brackets.end.zs

  numeric:
    patterns:
      - name: constant.numeric.binary.zs
        match: '(?<!\.)\b0[bB]\d+\b(?!\.)'

      - name: constant.numeric.octal.zs
        match: '(?<!\.)\b0[oO]?\d+\b(?!\.)'

      - name: constant.numeric.decimal.zs
        match: '(?<!\.)\b(0|([1-9][0-9]*))[Ll]?\b(?!\.)'

      - name: constant.numeric.hex.zs
        match: '(?<!\.)\b(0[Xx][A-Fa-f0-9]+)[Ll]?\b(?!\.)'

      - name: constant.numeric.floating.zs
        match: '(?<!\.)\b\d+(\.\d+[fFdD]?)?\b(?!\.)'

  string:
    patterns:
      - name: string.quoted.double.zs
        begin: '"'
        beginCaptures:
          '0':
            name: punctuation.definition.string.begin.zs
        end: '"'
        endCaptures:
          '0':
            name: punctuation.definition.string.end.zs
        patterns:
          - include: '#string-character-escape'
      - name: string.quoted.single.zs
        begin: "'"
        beginCaptures:
          '0':
            name: punctuation.definition.string.begin.zs
        end: "'"
        endCaptures:
          '0':
            name: punctuation.definition.string.end.zs
        patterns:
          - include: '#string-character-escape'
  
  string-character-escape:
    name: constant.character.escape.zs
    match: '\\([uU][0-9a-fA-F]{4}|.)'

  type-annotation:
    name: meta.type-annotation.zs
    begin: '(?=\b(as)\b)'
    beginCaptures:
      '1':
        name: 'keyword.control.as.zs'
    end: '(?=[-+*/%~^!&|:?<>,=){};])'
    patterns:
      - include: '#type-literal'

  type-literal:
    patterns:
      - match: '\bfunction\b'
        name: storage.type.function.zs
      - match: '\.'
        name: punctuation.separator.accessor.zs
      - begin: '[\[(]'
        beginCaptures:
          '0':
            name: meta.brace.zs
        end: '[\])]'
        endCaptures:
          '0':
            name: meta.brace.zs
        patterns:
          - match: ','
            name: punctuation.separator.comma.zs
          - include: '#type-literal'
      - match: '\b([a-zA-Z_$][[a-zA-Z0-9]_$]*)\b'
        name: support.type.zs

  identifier:
    name: variable.other.zs
    match: '\b([a-zA-Z_$][a-zA-Z0-9_$]*)\b'

  comments:
    patterns:
      - name: comment.line.zs
        begin: '//|#'
        beginCaptures:
          '0':
            name: punctuation.definition.comment.zs
        end: '\n'
      - name: comment.block.zs
        begin: '\/\*'
        beginCaptures:
          '0':
            name: punctuation.definition.comment.zs
        end: '\*\/'
        endCaptures:
          '0':
            name: punctuation.definition.comment.zs
