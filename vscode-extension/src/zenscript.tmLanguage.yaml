# This is source file #
# Execute the "npm run yaml2json" command in terminal to generate json file #
name: ZenScript
scopeName: source.zenscript
fileTypes:
  - zs

patterns:
  - include: '#preprocessor'
  - include: '#comments'
  - include: '#import-declaration'
  - include: '#class-declaration'
  - include: '#statements'
  - include: '#function-call'
  - include: '#member-call'
  - include: '#literals'
  - include: '#keywords'
  - include: '#identifiers'

repository:

  preprocessor:
    name: meta.preprocessor.zenscript
    match: '^\s*(#)(\w+)\b(?:\s+(.*))?$'
    captures:
      '1':
        name: punctuation.definition.preprocessor.zenscript
      '2':
        name: entity.name.preprocessor.zenscript
      '3':
        name: string.unquoted.zenscript
    end: \n

  import-declaration:
    name: meta.import.zenscript
    match: '\b(import)\s+(\w+(?:\.\w+)*\.(\w+))\b(?:\s+(as)\s+(\w+))?\s*(;)'
    captures:
      '1':
        name: keyword.other.import.zenscript
      '4':
        name: keyword.other.as.zenscript
      '5':
        name: variable.other.alias.zenscript
      '6':
        name: punctuation.terminator.zenscript

  class-declaration:
    name: meta.class-declaration.zenscript
    begin: '(?=\b(zenClass)\b)'
    beginCaptures:
      '1':
        name: keyword.other.zenscript
    end: '(?<=\})'
    patterns:
      - name: support.class.zenscript
        match: '(?:\bzenClass\b)(?:\s+)([a-zA-Z_][a-zA-Z0-9_]*)'
      - include: '#class-body'

  class-constructor:
    name: meta.class.constructor.zenscript
    begin: '(?=\b(zenConstructor)\b)'
    beginCaptures:
      '1':
        name: keyword.other.zenscript
    end: '(?<=\})'
    patterns:
      - include: '#formal-parameters'
      - include: '#class-body'

  class-body:
    name: meta.class.body.zenscript
    begin: '{'
    beginCaptures:
      '0':
        name: meta.block.begin.zenscript
    end: '}'
    endCaptures:
      '0':
        name: meta.block.end.zenscript
    patterns:
      - include: '#comments'
      - include: '#class-constructor'
      - include: '#statements'
      - include: '#member-call'
      - include: '#function-call'
      - include: '#keywords'
      - include: '#identifiers'

  function-body:
    name: meta.function.body.zenscript
    patterns:
      - include: '#block'

  identifiers:
    name: variable.other.zenscript
    match: '(?<!\.)\b([a-zA-Z_][a-zA-Z0-9_]*)\b'

  # 和运算符 < 冲突，待修复
  brackethandler-bak:
    name: variable.other.brackethandler.zenscript
    begin: '(?=(<))'
    beginCaptures:
      '1':
        name: storage.type.brackethandler.zenscript punctuation.definition.brackethandler.begin.zenscript
    end: '>'
    endCaptures:
      '0':
        name: storage.type.brackethandler.zenscript punctuation.definition.brackethandler.end.zenscript
    patterns:
      - name: variable.other.constant.brackethandler.name.zenscript
        match: '(?:<)(?:\s+)?([\w\.\|]+)(?:\s+)?(?=:)'
      - name: storage.type.brackethandler.zenscript punctuation.separator.colon.brackethandler.zenscript
        match: ':'
      - include: '#numbers'

  # 还没修呢
  brackethandler:
    name: variable.other.brackethandler.zenscript
    match: '(<)(\s*[\w\*\s]+)([:\w\*\s]+)*(\d*)(>)'
    captures:
      '1':
        name: storage.type.brackethandler.zenscript punctuation.definition.brackethandler.begin.zenscript
      '2':
        name: variable.other.constant.brackethandler.name.zenscript
      '3':
        patterns:
          - include: '#numbers'
          - name: storage.type.brackethandler.zenscript punctuation.separator.colon.brackethandler.zenscript
            match: ':' 
      '5':
        name: storage.type.brackethandler.zenscript punctuation.definition.brackethandler.end.zenscript


  function-call:
    name: meta.function-call.zenscript
    begin: '([A-Za-z_$][\w$]*)\s*(\()'
    beginCaptures: 
      '1':
        name: entity.name.function.zenscript
      '2':
        name: punctuation.definition.parameters.begin.zenscript
    end: '\)'
    endCaptures:
      '0':
        name: punctuation.definition.parameters.end.zenscript
    patterns:
      - name: punctuation.separator.comma.parameter.zenscript
        match: ','
      - include: '#comments'
      - include: '#function-declaration'
      - include: '#member-call'
      - include: '#function-call'
      - include: '#type-declaration'
      - include: '#literals'
      - include: '#map-literal'
      - include: '#keywords'
      - include: '#identifiers'

  member-call:
    name: meta.member-call.zenscript
    begin: '(?<=\.)\b([a-zA-Z_][a-zA-Z0-9_]*)\b(?!\()'
    beginCaptures:
      # '1':
        # name: variable.other.constant.member.zenscript
    end: '(?=\.|\[|\]|\)|;|\s|\b)'

  function-declaration:
    name: meta.definition.function.zenscript
    begin: '(?=\b(function)\b)'
    beginCaptures:
      "1":
        name: keyword.other.function.zenscript
    end: '(?<=\})'
    patterns:
      - match: '(?:\bfunction\b)(?:\s+)([a-zA-Z_][a-zA-Z0-9_]*)'
        captures:
          '1':
            name: entity.name.function.zenscript
      - include: '#comments'
      - include: '#keywords'
      - include: '#formal-parameters'
      - include: '#function-return-type'
      - include: '#function-body'

  function-return-type:
    name: meta.function.return-type
    begin: '(?=as)'
    end: '(?<=\w|\])(?=\s|{)'
    patterns:
      - include: '#type-declaration'

  formal-parameters:
    name: meta.parameters.zenscript
    begin: '\('
    beginCaptures:
      '0':
        name: punctuation.definition.parameters.begin.zenscript
    end: '\)'
    endCaptures:
      '0':
        name: punctuation.definition.parameters.end.zenscript
    patterns:
      - name: punctuation.separator.parameter.zenscript
        match: ','
      - include: '#formal-parameter'
      - include: '#comments'

  formal-parameter:
    name: meta.parameter.zenscript
    begin: '[_a-zA-Z][_a-zA-Z0-9]*'
    beginCaptures:
      '0':
        name: variable.parameter.zenscript
    end: '(?=,|\))'
    patterns:
      #- name: meta.type-declaration.zenscript
      #  match: '\b(as)\b(?:\s+)([a-zA-Z0-9_\[\]]+)'
      - include: '#type-declaration'
        # captures:
        #   '1':
        #     name: keyword.other.as.zenscript
        #   '2':
        #     patterns:
        #       - include: '#all-types'

  type-declaration:
    name: meta.type-declaration.zenscript
    begin: '\b(as)\b'
    beginCaptures:
      '1':
        name: keyword.other.as.zenscript
    end: '(?=(?:\s*)(?:,|\)|=|{|}|;))'
    patterns:
      - include: '#all-types'

  all-types:
    patterns:
      - include: '#primitive-types'
      - include: '#extended-types'

  array-literal:
    name: meta.array-literal.zenscript
    begin: '(\[)'
    beginCaptures:
      '1':
        name: punctuation.definition.array.begin.zenscript
    end: '\]'
    endCaptures:
      '0':
        name: punctuation.definition.array.end.zenscript
    patterns:
      - name: punctuation.separator.comma.array.zenscript
        match: ','
      - include: '#comments'
      - include: '#function-call'
      - include: '#member-call'
      - include: '#literals'
      - include: '#keywords'
      - include: '#identifiers'

  map-literal:
    name: meta.map-literal.zenscript
    begin: '{'
    beginCaptures:
      '0':
        name: punctuation.definition.map.begin.zenscript
    end: '}'
    endCaptures:
      '0':
        name: punctuation.definition.map.end.zenscript
    patterns:
      - name: punctuation.separator.comma.map.zenscript
        match: ','
      - include: '#map-entry'
      - include: '#comments'

  map-entry:
    begin: '(?<={|,|\s)(?=(?:\b\w|\[|{|<|")(?:[\s\w\[\]{}<>"]*):)'
    end: '(?=,|\s*})'
    patterns:
      - name: punctuation.separator.comma.map.key-value.zenscript
        match: ':'
      - include: '#literals'
      - include: '#member-call'
      - include: '#function-call'
      - include: '#type-declaration'
      - include: '#identifiers'

    
  # map-key:
  #   name: meta.map.key.zenscript
  #   begin: '(?<={|,|\s)(?=(?:\b\w|\[|{|<|")(?:[\s\w\[\]{}<>"]*):)'
  #   end: '(?<!\s)(?=\s*(?=:))'
  #   patterns:
  #     #- name: string.unquoted.zenscript
  #     #  match: '(?<!\.)\b([a-zA-Z_][a-zA-Z0-9_]*)\b'
  #     - include: '#literals'
  #     - include: '#member-call'
  #     - include: '#function-call'
  #     - include: '#type-declaration'
  #     - include: '#identifiers'


  # map-value:
  #   name: meta.map.value.zenscript
  #   begin: '(?<=\s|:)(?=(?:\b\w|\[|{|<|"))'
  #   end: '(?=,|})'
  #   patterns:
  #     - include: '#literals'
  #     - include: '#member-call'
  #     - include: '#function-call'
  #     - include: '#type-declaration'
  #     - include: '#identifiers'
  
  primitive-types:
    name: support.type.primitive.zenscript
    match: '\b(any|bool|byte|short|int|long|float|double|string|void)\b'

  extended-types:
    patterns:
      - name: support.type.extended.zenscript
        match: '\b([a-zA-Z_][a-zA-Z0-9_\.]*)\b'

  statements:
    patterns:
      - include: '#comments'
      - include: '#function-declaration'
      - include: '#variable-declaration'
      - include: '#if-statement'
      - include: '#while-statement'
      - include: '#block'

  numbers:
    patterns:
      - name: constant.numeric.binary.zenscript invalid.illegal.not_supported_binary_type.zenscript
        match: (?<!\.)\b0[bB]\d+\b(?!\.)

      - name: constant.numeric.octal.zenscript invalid.illegal.not_supported_octal_type.zenscript
        match: '(?<!\.)\b0[oO]?\d+\b(?!\.)'
      
      - name: constant.numeric.decimal.zenscript
        match: '(?<!\.)\b(0|([1-9][0-9]*))[Ll]?\b(?!\.)'

      - name: constant.numeric.hex.zenscript
        match: '(?<!\.)\b(0[Xx][A-Fa-f0-9]+)\b(?!\.)'

      - name: constant.numeric.floating.zenscript
        match: '(?<!\.)\b\d+(\.\d+[fFdD]?)?\b(?!\.)'

  expression:
    patterns:
      - include: '#literals'
      #- include: '#identifiers'

  variable-declaration:
    name: meta.definition.variable.zenscript
    begin: '(?=\b(var|val|global|static)\b)'
    beginCaptures:
      '1':
        name: keyword.other.zenscript
    end: '(?=(;))'
    endCaptures:
      '1':
        name: punctuation.terminator.zenscript
    patterns:
      - match: '\b(?:var|val|global|static)\b\s+([a-zA-Z_][a-zA-Z0-9_]*)\b'
        captures:
          '1': 
            name: variable.other.definition.zenscript
      - include: '#type-declaration'
      - include: '#function-declaration'
      - include: '#member-call'
      - include: '#function-call'
      - include: '#literals'
      - include: '#map-literal'
      - include: '#keywords'
      - include: '#identifiers'

  block:
    name: meta.block.zenscript
    begin: '{'
    beginCaptures: 
      '0':
        name: meta.block.begin.zenscript
    end: '}'
    endCaptures:
      '0':
        name: meta.block.end.zenscript
    patterns:
      - include: '#comments'
      - include: '#statements'
      - include: '#member-call'
      - include: '#function-call'
      - include: '#type-declaration'
      - include: '#literals'
      - include: '#keywords'
      - include: '#identifiers'

  if-statement:
    patterns:
      - begin: '\b(?=if)\b'
        end: '(?<=;|\})'
        name: test
        patterns:
          - name: keyword.control.zenscript
            match: '\b(if)\b'
          - name: meta.brace.round.zenscript
            begin: '\('
            end: '\)'
            patterns: 
              - include: '#comments'
              - include: '#function-call'
              - include: '#member-call'
              - include: '#brackethandler-fix'
              - include: '#keywords'
              - include: '#literals'
              - include: '#identifiers'
          - include: '#comments'
          - include: '#block'
          - include: '#statements'
          - include: '#function-call'
          - include: '#member-call'
          - include: '#keywords'
          - include: '#identifiers'

  while-statement:
    patterns:
      - begin: '\b(?=while)\b'
        end: '(?<=;|\})'
        patterns:
          - name: keyword.control.zenscript
            match: '\b(while)\b'
          - name: meta.brace.round.zenscript
            begin: '\('
            end: '\)'
            patterns: 
              - include: '#comments'
              - include: '#function-call'
              - include: '#member-call'
              - include: '#brackethandler-fix'
              - include: '#keywords'
              - include: '#literals'
              - include: '#identifiers'
          - include: '#keyword'
          - include: '#block'
          - include: '#comments'

  literals:
    patterns:
      - include: '#numbers'
      - include: '#strings'
      - include: '#boolean-literal'
      - include: '#null-literal'
      - include: '#brackethandler'
      - include: '#array-literal'
      - include: '#map-literal'

  boolean-literal:
    patterns:
      - name: constant.language.boolean.true.zenscript
        match: '\b(true)\b'
      - name: constant.language.boolean.false.zenscript
        match: '\b(false)\b'

  null-literal:
    name: constant.language.null.zenscript
    match: '\b(null)\b'

  keywords:
    patterns:
      - name: keyword.control.ternary.zenscript
        match: '\?|:'

      - name: keyword.control.zenscript
        match: '\b(return|break|continue|do|while|for|if|else|in|has)\b'

      - name: keyword.other.zenscript
        match: '\b(import|function|var|val|global|static|this|zenClass|zenConstructor|frigginClass|frigginConstructor)\b'

      - name: keyword.operator.range.zenscript
        match: '\b(to|\.\.)\b'

      - name: keyword.control.instanceof.zenscript
        match: '\b(instanceof)\b'

      - name: keyword.operator.comparison.zenscript
        match: '(==|!=|<=|>=|<|>)'

      - name: keyword.operator.assignment.arithmetic.zenscript
        match: '([\+\-\*\/\%\~]=)'

      - name: keyword.operator.assignment.zenscript
        match: '(=)'

      - name: keyword.operator.arithmetic.zenscript
        match: '(\-|\+|\*|\/|\%|\~)'
        
      - name: keyword.operator.logical.zenscript
        match: '(!|&&?|\|\|?)'

      - name: punctuation.separator.period.zenscript
        match: '(?<!\.)\.(?!\.)'

      - name: punctuation.separator.comma.zenscript
        match: ','

      - name: punctuation.terminator.zenscript
        match: ';'

  strings:
    patterns:
      - include: '#single-quoted-string'
      - include: '#double-quoted-string'

  double-quoted-string:
    name: string.quoted.double.zenscript
    begin: '"'
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.zenscript
    end: '(")|((?:[^\\\n])$)'
    endCaptures:
      '1':
        name: punctuation.definition.string.end.zenscript
      '2':
        name: invalid.illegal.newline.zenscript
    patterns:
      - include: '#string-character-escape'
  
  single-quoted-string:
    name: string.quoted.single.zenscript
    begin: ''''
    beginCaptures:
      '0':
        name: punctuation.definition.string.begin.zenscript
    end: '(\'')|((?:[^\\\n])$)'
    endCaptures:
      '1':
        name: punctuation.definition.string.end.zenscript
      '2':
        name: invalid.illegal.newline.zenscript
    patterns:
      - include: '#string-character-escape'
  
  string-character-escape:
    name: constant.character.escape.zenscript
    match: '\\([uU][0-9a-fA-F]{4}|.)'
  
  comments:
    patterns:
      - include: '#inline-comment'
      - include: '#bolck-comment'

  bolck-comment:
    name: comment.block.zenscript
    begin: '\/\*'
    beginCaptures:
      '0':
        name: punctuation.definition.comment.zenscript
    end: '\*\/'
    endCaptures:
      '0':
        name: punctuation.definition.comment.zenscript

  inline-comment:
    name: comment.inline.zenscript
    begin: '//|#'
    beginCaptures:
      '0':
        name: punctuation.definition.comment.zenscript
    end: '\n'
